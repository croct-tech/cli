// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddWrapper should correctly transform aliasedImport.tsx: aliasedImport.tsx 1`] = `
"import type { AppProps } from "next/app";
import { ReactElement } from "react";
import { CroctProvider as Provider } from "@croct/plug-react";
export default function App({
  Component,
  pageProps
}: AppProps): ReactElement {
  return (<Provider>
    <Component {...pageProps} />
  </Provider>);
}"
`;

exports[`AddWrapper should correctly transform defaultExport.tsx: defaultExport.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
import type { AppProps } from "next/app";
import { ReactElement } from "react";
export default function App({
  Component,
  pageProps
}: AppProps): ReactElement {
  return (<CroctProvider>
    <Component {...pageProps} />
  </CroctProvider>);
}"
`;

exports[`AddWrapper should correctly transform defaultExportAnonymousFunctionWithUnrelatedReturn.tsx: defaultExportAnonymousFunctionWithUnrelatedReturn.tsx 1`] = `
"export default function () {
    return null;
}
"
`;

exports[`AddWrapper should correctly transform defaultExportArrowFunctionReference.tsx: defaultExportArrowFunctionReference.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
const Layout = ({
  children
}) => {
  return (<>
        <main>
            <CroctProvider>
        {children}
      </CroctProvider>
        </main>
    </>);
};
export default Layout;"
`;

exports[`AddWrapper should correctly transform defaultExportArrowFunctionWithUnrelatedReturn.tsx: defaultExportArrowFunctionWithUnrelatedReturn.tsx 1`] = `
"export default () => null;
"
`;

exports[`AddWrapper should correctly transform defaultExportFunctionExpressionReference.tsx: defaultExportFunctionExpressionReference.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
const Layout = function ({
  children
}) {
  return (<>
        <main>
            <CroctProvider>
        {children}
      </CroctProvider>
        </main>
    </>);
};
export default Layout;"
`;

exports[`AddWrapper should correctly transform defaultExportFunctionReference.tsx: defaultExportFunctionReference.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
function Layout({
  children
}) {
  return (<>
        <main>
            <CroctProvider>
        {children}
      </CroctProvider>
        </main>
    </>);
}
export default Layout;"
`;

exports[`AddWrapper should correctly transform defaultExportFunctionWithoutReturn.tsx: defaultExportFunctionWithoutReturn.tsx 1`] = `
"export default function () {
}
"
`;

exports[`AddWrapper should correctly transform defaultExportIndirectReference.tsx: defaultExportIndirectReference.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
// Block scoped variable, unrelated to the default export
{
  const Layout = () => {};
  const Reference = Layout;
}
const Layout = ({
  children
}) => {
  return (<CroctProvider>
    <>
        <main>
            {children}
        </main>
    </>
  </CroctProvider>);
};
const Reference = Layout;
export default Reference;"
`;

exports[`AddWrapper should correctly transform defaultExportUnrelated.tsx: defaultExportUnrelated.tsx 1`] = `
"export default 1;
"
`;

exports[`AddWrapper should correctly transform defaultExportWrapped.tsx: defaultExportWrapped.tsx 1`] = `
"import type {AppProps} from "next/app";
import {ReactElement} from "react";
import {CroctProvider} from "@croct/plug-react";

export default function App({Component, pageProps}: AppProps): ReactElement {
    return (
        <CroctProvider>
            <Component {...pageProps} />;
        </CroctProvider>
    );
}
"
`;

exports[`AddWrapper should correctly transform defaultExportWrappedAlias.tsx: defaultExportWrappedAlias.tsx 1`] = `
"import type {AppProps} from "next/app";
import {ReactElement} from "react";
import {CroctProvider as Provider} from "@croct/plug-react";

export default function App({Component, pageProps}: AppProps): ReactElement {
    return (
        <Provider>
            <Component {...pageProps} />;
        </Provider>
    );
}
"
`;

exports[`AddWrapper should correctly transform namedExportArrowFunction.tsx: namedExportArrowFunction.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
const UnrelatedComponent = ({
  Component,
  pageProps
}) => {
  return <Component {...pageProps} />;
};
export const App = ({
  Component,
  pageProps
}) => <CroctProvider>
  <Component {...pageProps} />
</CroctProvider>;"
`;

exports[`AddWrapper should correctly transform namedExportArrowFunctionWithBody.tsx: namedExportArrowFunctionWithBody.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
const UnrelatedComponent = ({
  Component,
  pageProps
}) => {
  return <Component {...pageProps} />;
};
export const App = ({
  Component,
  pageProps
}) => {
  return (<CroctProvider>
    <Component {...pageProps} />
  </CroctProvider>);
};"
`;

exports[`AddWrapper should correctly transform namedExportArrowFunctionWrapped.tsx: namedExportArrowFunctionWrapped.tsx 1`] = `
"import {CroctProvider} from "@croct/plug-react";

const UnrelatedComponent = ({Component, pageProps}) => {
    return <Component {...pageProps} />;
}

export const App = ({Component, pageProps}) => (
    <CroctProvider>
        <Component {...pageProps} />
    </CroctProvider>
);
"
`;

exports[`AddWrapper should correctly transform namedExportFunctionDeclaration.tsx: namedExportFunctionDeclaration.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
const UnrelatedComponent = ({
  Component,
  pageProps
}) => {
  return <Component {...pageProps} />;
};
export function App({
  Component,
  pageProps
}) {
  return (<CroctProvider>
    <Component {...pageProps} />
  </CroctProvider>);
}"
`;

exports[`AddWrapper should correctly transform namedExportFunctionExpression.tsx: namedExportFunctionExpression.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
const UnrelatedComponent = ({
  Component,
  pageProps
}) => {
  return <Component {...pageProps} />;
};
export const App = function ({
  Component,
  pageProps
}) {
  return (<CroctProvider>
    <Component {...pageProps} />
  </CroctProvider>);
};"
`;

exports[`AddWrapper should correctly transform namedExportUnrelated.tsx: namedExportUnrelated.tsx 1`] = `
"export const foo = 1;
"
`;

exports[`AddWrapper should correctly transform namedSpecifiedExport.tsx: namedSpecifiedExport.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
// Block scoped variable, unrelated to the default export
{
  function Layout() {}
  const Reference = Layout;
}
function unrelated() {}
const Layout = ({
  children
}) => {
  return (<CroctProvider>
    <>
        <main>
            {children}
        </main>
    </>
  </CroctProvider>);
};
const Reference = Layout;
export { Reference as Layout };"
`;

exports[`AddWrapper should correctly transform parenthesizedReturn.tsx: parenthesizedReturn.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
export default function App({
  Component,
  pageProps
}) {
  return (<CroctProvider>
    <div>
            <section>
                <Component {...pageProps} />
            </section>
        </div>
  </CroctProvider>);
}"
`;

exports[`AddWrapper should correctly transform providerLiteralProp.tsx: providerLiteralProp.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
export default function Layout({
  children
}) {
  return (<CroctProvider booleanProp={true} numberProp={42} stringProp={"value"} nullProp={null}>
    <>
            <main>{children}</main>
        </>
  </CroctProvider>);
}"
`;

exports[`AddWrapper should correctly transform providerReferenceProp.tsx: providerReferenceProp.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
export default function Layout({
  children
}) {
  return (<CroctProvider appId={process.env.REACT_APP_CROCT_APP_ID}>
    <>
            <main>{children}</main>
        </>
  </CroctProvider>);
}"
`;

exports[`AddWrapper should correctly transform providerTernaryProp.tsx: providerTernaryProp.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
export default function Layout({
  children
}) {
  return (<CroctProvider booleanProp={process.env.NODE_ENV === "production" ? process.env.PRODUCTION_CROCT_APP_ID : process.env.STAGING_CROCT_APP_ID}>
    <>
            <main>{children}</main>
        </>
  </CroctProvider>);
}"
`;

exports[`AddWrapper should correctly transform providerVariableProp.tsx: providerVariableProp.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
export default function Layout({
  children
}) {
  return (<CroctProvider appId={CROCT_APP_ID}>
    <>
            <main>{children}</main>
        </>
  </CroctProvider>);
}"
`;

exports[`AddWrapper should correctly transform targetChildren.tsx: targetChildren.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
export default function Layout({
  children
}) {
  return (<html lang="en">
            <body>
                {/* This is a comment */}
                <CroctProvider>
        {children}
      </CroctProvider>
            </body>
        </html>);
}"
`;

exports[`AddWrapper should correctly transform targetChildrenAliasedImport.tsx: targetChildrenAliasedImport.tsx 1`] = `
"import { CroctProvider as Provider } from "@croct/plug-react";
export default function Layout({
  children
}) {
  return (<html lang="en">
            <body>
                {/* This is a comment */}
                <Provider>
        {children}
      </Provider>
            </body>
        </html>);
}"
`;

exports[`AddWrapper should correctly transform targetComponent.tsx: targetComponent.tsx 1`] = `
"import { CroctProvider } from "@croct/plug-react";
export default function App({
  Component,
  pageProps
}) {
  return (<div>
        <section>
            <CroctProvider>
        <Component {...pageProps} />
      </CroctProvider>
        </section>
    </div>);
}"
`;
